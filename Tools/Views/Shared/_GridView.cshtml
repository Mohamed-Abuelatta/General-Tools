@using System.Data
@using Newtonsoft.Json
@model Grid

@{
    ViewData["Title"] = "make grid view";
    List<DataRow> DR = Model.DataRows;
    Icons Ico = Model.Icons;
    GridSetting gridSetting = Model.gridSetting;
    List<PagerButton> Pbtn = Model.pagerButtons;
    //List<Column>
}
<style>th, td{padding:20px;}</style>

<div>

    <h1>@gridSetting.GridTitle</h1>

    <table id="@(Model.TableName)">
        <thead>
            <tr id="rowHead">
                <td>
                    <div>
                        <a href="#" class="@Ico.DropDownSVG"></a>
                        <a href="#" class="@Ico.AddSVG" onclick="toggleView(rowHead)"></a>
                    </div>
                    <div>
                        <a href="#" class="@Ico.DoItSVG" onclick="onSave('rowHead')"></a>
                        <a href="#" class="@Ico.CancelSVG" onclick="toggleView(rowHead)"></a>
                    </div>
                </td>
                @foreach (var headerCol in Model.Columns)
                {
                    <td>
                        <div> @headerCol.ColumnDisplayName </div>
                    </td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (DataRow row in DR)
            {
                <tr id="@row["RowKey"]">
                    <th>
                        <div>
                            <a href="#" class="@Ico.DeleteSVG" onclick="deleteMsg()"></a>
                            <a href="#" class="@Ico.EditSVG" onclick="toggleView(@row["RowKey"])"></a>
                        </div>
                        <div>
                            <a href="#" class="@Ico.DoItSVG" onclick="onSave('@row["RowKey"]')"></a>
                            <a href="#" class="@Ico.CancelSVG" onclick="toggleView(@row["RowKey"])"></a>
                        </div>
                    </th>
                    @foreach (var Col in Model.Columns)
                    {
                        <td>
                            <div> @row[Col.ColumnName] </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td id="rowFoot" colspan="@(Model.Columns.Count+1)">

                    <partial name="_GridPagination" model="@Pbtn" />

                </td>
            </tr>
        </tfoot>
    </table>
    <div>
        <form id="@(Model.FormName)" style="display:none;"></form>
    </div>
</div>


<script type="text/javascript">
    var table = document.getElementById('@(Model.TableName)');
    var tableBody = document.querySelector('#@Model.TableName tbody');
    var form = @(Model.FormName);
    var deleteUrl = "@gridSetting.OnDeleteAction";
    var saveUrl = "@gridSetting.OnSaveAction";
    var pagingUrl = "@gridSetting.OnPagingAction";
    var RowsNumPerPage = "@gridSetting.ItemsPerPage";

    function toggleView(row) {
        (row.dataset.isinaction === 'true') ?
            [...row.cells].forEach((cell) => { cell.className = "normalView";  }) :
            [...row.cells].forEach((cell) => { cell.className = "actionView"; });
        row.dataset.isinaction = !(row.dataset.isinaction === 'true');
    }

    function pagination(page, action) {
        fetch(`${pagingUrl}?pagerStart=${page}&pageAction=${action}`, { method: 'get' })
        .then(response => response.text())
        .then((data) => { 
            switch (action) {
            case "Next": case "Prev":
                document.querySelector('#rowFoot').innerHTML = data;
                var p = document.getElementsByClassName('activePageBtn')[0].innerHTML;
                pagination(p, '');
            break;
            default:
                [...document.getElementsByClassName("page")].forEach((elm) => { 
                    (elm.id == `page${page}`) ? elm.classList.add('activePageBtn') : elm.classList.remove('activePageBtn'); 
                });
                tableBody.innerHTML = data;
            break;
            }  
        })
        .catch(err => { alert("حدث خطا باداة المتصفح"); });
    };

    function onDelete(url) {
        fetch(deleteUrl, { method: 'get' })
        .then(response => response.text())
        .then((data) => { })
        .catch(err => { });
    }

    function onSave(row) {
        var mode = row == 'rowHead' ? 'add': 'edit';
        row = document.getElementById(row);
        const rowClone = row.cloneNode(true);
        rowClone.removeAttribute("id");
        form.innerHTML = "";
        form.appendChild(rowClone);
        var formData = new FormData(form);
        form.innerHTML = "";
        //if ((table.rows.length - 2) == 1 && document.querySelector("[data-pagebtn='end']").classList.contains("activePageBtn")) {
        //    alert('show prev page and remove last pagination');
        //}
        fetch(saveUrl, {
            method: 'post',
            body: formData
        })
        .then(response => response.text())
        .then((data) => {
         
            switch(mode){
                case 'add':
                    var lastPagerBtn = document.querySelector("[end]");
                    if (IsExistElm(lastPagerBtn) === true) {
                        if (lastPagerBtn.classList.contains("activePageBtn") &&
                            table.rows.length - 2 <= RowsNumPerPage) {
                                tableBody.innerHTML += data;
                        }
                        if (RowsNumPerPage > table.rows.length - 2) {
                               tableBody.innerHTML = data;
                        }
                    }

                break;
                case 'edit':                    
                document.querySelector("#@(Model.TableName)").rows[0].insertInto(data);

                break;
                case 'delete':
                break;
            }

        })
        .catch(err => {
            alert("ناسف لعدم اتمام العملية");
        });
    };

    function IsExistElm(elm){ return (typeof(elm) != 'undefined' && elm != null) ? true : false; }

    function imgUpload() {
        var img = event.target;
        var uploader = document.querySelector(`[data-sign='${img.id}']`);
        uploader.click();
        uploader.onchange = function () {
            var reader = new FileReader();
            reader.onload = function (evt) {
                img.src = evt.target.result;
            }
            reader.readAsDataURL(uploader.files[0]);
        }
    }

</script>
